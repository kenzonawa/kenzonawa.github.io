
	var companyList = [];
	var maxPrice = 0;
	var minPrice = 0;
  var maxFunding = 0;
  var minFunding = 0;
	var temp = [];
  var rectWidth = 0;


	// Append Div for tooltip to SVG
	var div = d3.select("body")
		.append("div")   
		.attr("class", "tooltip")               
		.style("opacity", 0);


  var aScale = d3.scale.linear()
      .domain([1950000,18500000,44000000,100000000,238800000,1200000000])
      .rangeRound([0,1,2,3,4,4])


	var q = d3.queue()
	.defer(d3.csv, "rectangles.csv")
	.defer(d3.csv, "rectangle2.csv")
  .defer(d3.csv, "mobile_by_funding.csv")
	.awaitAll(function(error, data) {
		if (error) throw error;
		
    maxPrice = d3.max(data[2], function(d) {
      return parseInt(d.price_amount);
      });
    maxFunding = d3.max(data[2], function(d) {
      return parseInt(d.funding_total_usd);
      });

    minPrice = d3.min(data[2], function(d) {
      return parseInt(d.price_amount);
      });
    minFunding = d3.min(data[2], function(d) {
      return parseInt(d.funding_total_usd);
      });

		var data1 = data[0];
		var data2 = data[1];
    var mobile = chunkify(data[2],5, true);
    var rects = new Array();
    var currentRow = 0;

		var svg = d3.select("#main").append("g")
		.attr("transform", "translate(100, 100)")
	      .attr({
	        "width": "800",
	        "height": "600"
	      })	    
      
      var xScale = d3.scale.ordinal()
      .domain(d3.range(13))
      .rangeRoundBands([0,300])

      rectWidth = xScale.rangeBand();
      
      var yScale = d3.scale.ordinal()
      .domain(d3.range(mobile.length))
      .rangeRoundBands([300,0], 0.05)

      var zScale = d3.scale.quantize()
      .domain([minPrice,maxPrice])
      .range([0,1,2,3,4])

      var colorScale = d3.scale.ordinal()
      .domain([0,1,2,3,4])
      .range(["#fff","#f0f0f0","#d6d6d6","#b0b0b0","#707070"])

      var y0 = d3.scale.ordinal()
        .domain(d3.range(5))
        .rangeRoundBands([300, 0], .5);
      
      var scalesArray = new Array();

      

      for (var i=0;i<mobile.length;i++){
        rects[i] = svg.selectAll(".rect"+i).data(mobile[i]);
      }
        
      console.log(mobile)

      var intervals = getIntervals(data[2],'funding');

      var fundScale = d3.scale.linear()
        .domain([intervals[0],intervals[1],intervals[2],intervals[3],intervals[4],intervals[5]])
        .range([0,1,2,3,4,4])

      var priceRange = svg.selectAll(".priceRange")
        .data(mobile)
      .enter().append("g")
        .attr("class", "priceRange")
        //.attr("transform", function(d,i) { return "translate(0," + y0(i) + ")"; })
        .style("fill", function(d,i) { return colorScale(i); });



    var crazy = priceRange.selectAll("rect")
        .data(function(d,i) { return d; })
      .enter().append("rect")
        .style("stroke", "black")
        .attr("width", xScale.rangeBand())
        .attr("x", function(d,i) { return xScale(i); })
        .attr("y", function(d) { return y0(Math.floor(fundScale(d.funding_total_usd))); })
        .attr("height", function(d) { return 25; })
        .on('mouseover', function(d,i){
              div.transition()    
                      .duration(200)    
                      .style("opacity", .9);    
                  div .html(d.name
                    + "<br/>funding: " + parseInt(d.funding_total_usd).toLocaleString()
                    + "<br/>price: " + parseInt(d.price_amount).toLocaleString()
                    ) 
                      .style("left", (d3.event.pageX) + "px")   
                      .style("top", (d3.event.pageY - 28) + "px"); 
            })
              .on('mouseout', function(d) {   
                  div.transition()    
                      .duration(500)    
                      .style("opacity", 0); 
              });
        

        /*
        for(var j=0; j< rects.length ; j++){
            rects[j].enter().append("rect")
            .attr("rx", 1)
            .attr("ry", 1)
            .attr({
              "x": function(d,i){return xScale(i)},
              "y": function(d){return yScale(j)},
              "width": xScale.rangeBand(),
              "height": function(d){return 25},
            })
            .attr("fill", function(d,i){
              return colorScale(j);
            })
            .style("stroke", "black") 
            //.attr("fill-opacity", "0.5")
            .attr("class", "rect"+j)
            .on('mouseover', function(d,i){
              div.transition()    
                      .duration(200)    
                      .style("opacity", .9);    
                  div .html(d.name
                    + "<br/>funding: " + parseInt(d.funding_total_usd).toLocaleString()
                    + "<br/>price: " + parseInt(d.price_amount).toLocaleString()
                    ) 
                      .style("left", (d3.event.pageX) + "px")   
                      .style("top", (d3.event.pageY - 28) + "px"); 
            })
              .on('mouseout', function(d) {   
                  div.transition()    
                      .duration(500)    
                      .style("opacity", 0); 
              })
        }*/

        d3.select("#change")
        	.on("click", function(){

            
            data[2].sort(function(x, y){
              return x.price_amount - y.price_amount;
            })
            mobile = chunkify(data[2],5, true);

            var intervals = getIntervals(data[2],'price');

            var zScale2 = d3.scale.linear()
              .domain([intervals[0],intervals[1],intervals[2],intervals[3],intervals[4],intervals[5]])
              .range([0,1,2,3,4,4])

            /*18500000,
            44000000,
            100000000,
            238800000*/

            for (var i=0;i<mobile.length;i++){
              scalesArray.push(new rightScale(intervals[i], intervals[i+1], 15));
            }
            console.log(scalesArray)

            console.log(mobile);
            //HEREeeeeeee!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       // http://bl.ocks.org/alansmithy/e984477a741bc56db5a5 

       //https://bl.ocks.org/d3noob/7030f35b72de721622b8  ?????

                    var circle = crazy
                        .data(data[2]);
                    
                    circle.exit().remove();//remove unneeded circles
                    circle.enter().append("rect")
                        .attr("width", xScale.rangeBand())
                        //.attr("x", function(d,i) { return xScale(i); })
                        //.attr("y", function(d) { return y0(Math.floor(fundScale(d.funding_total_usd))); })
                        .attr("height", function(d) { return 25; })

                    //update all circles to new positions
                    circle.transition()
                        .duration(3000)
                        .attr("x",function(d,i){
                            return scalesArray[Math.floor(zScale2(parseInt(d.price_amount)))].scaleIt(d.price_amount);
                        })
                        .attr("y", function(d,i) {
                          return y0(Math.floor(zScale2(parseInt(d.price_amount))));
                        });

              /*crazy
              .transition()
              .delay(function(d, i) {
                return (i*100);
              })
              .duration(1000)
              .attr("x", function(d,i) {
                return scalesArray[Math.floor(zScale2(parseInt(d.price_amount)))].scaleIt(d.price_amount);
              })
              .attr("y", function(d,i) {
                return y0(Math.floor(zScale2(parseInt(d.price_amount))));
              });*/


            /* for (var j=0; j<mobile.length ; j++){
              rects[j]
              .transition()
              .delay(function(d, i) {
                return -((i-15)*100);
              })
              .duration(1000)
              .attr("x", function(d,i) {
                return scalesArray[zScale2(parseInt(d.price_amount))].scaleIt();
              })
              .attr("y", function(d,i) {
                return yScale(zScale2(parseInt(d.price_amount)));
              });
            }*/
        		
        });


	});

function getIntervals(data, column){
  var intervals = new Array();
  var counter = 0;
  var bucketSize = Math.round(data.length/5);
  console.log("Bucket size"+bucketSize)
  if(column == 'funding') intervals.push(minFunding);
  else if(column == 'price') intervals.push(minPrice);

  for (var i =0; i<data.length;i++){
    if(counter == bucketSize){
      if(column == 'funding') intervals.push(parseInt(data[i].funding_total_usd));
      else if(column == 'price') intervals.push(parseInt(data[i].price_amount));
      counter = 0;
    }
    counter++;
  }

  if(column == 'funding') intervals.push(maxFunding);
  else if(column == 'price') intervals.push(maxPrice);
  return intervals;
}

function rightScale(lower, upper, size) {
	this.currentIndex = 0;

  var tempScale = d3.scale.linear()
    .domain([lower,upper])
    .range([0,13]);

  this.xCoordinateScale = tempScale;

	var thisScale = d3.scale.ordinal()
      .domain(d3.range(size))
      .rangeRoundBands([700,400]);

    this.scale = thisScale;
}

rightScale.prototype.scaleIt = function(price) {
	var i = this.currentIndex;
  this.currentIndex++;
  //console.log(this.xCoordinateScale(price))
  var value = 700 - (this.xCoordinateScale(price)*rectWidth);
    return value;
};

function objectFindByKey(array, key, value) {
    for (var i = 0; i < array.length; i++) {
        if (array[i][key] === value) {
            return array[i];
        }
    }
    return null;
}

function chunkify(a, n, balanced) {
    
    if (n < 2)
        return [a];

    var len = a.length,
            out = [],
            i = 0,
            size;

    if (len % n === 0) {
        size = Math.floor(len / n);
        while (i < len) {
            out.push(a.slice(i, i += size));
        }
    }

    else if (balanced) {
        while (i < len) {
            size = Math.ceil((len - i) / n--);
            out.push(a.slice(i, i += size));
        }
    }

    else {

        n--;
        size = Math.floor(len / n);
        if (len % size === 0)
            size--;
        while (i < size * n) {
            out.push(a.slice(i, i += size));
        }
        out.push(a.slice(size * n));

    }

    return out;
}